// This file is generated by KDAB's kdwsdl2cpp from LoanCalcVerify.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "wsdl_LoanCalcVerify.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

KDSoapValue NS__GetVersion::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://axisversion.sample"), QString::fromLatin1("getVersion"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    return mainValue;
}

void NS__GetVersion::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:574
}

NS__GetVersion::NS__GetVersion()
{
}

NS__GetVersion::~NS__GetVersion()
{
}


class NS__GetVersionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mReturn;
    bool mReturn_nil;
};

NS__GetVersionResponse::PrivateDPtr::PrivateDPtr()
    : mReturn_nil(true)
{
}


void NS__GetVersionResponse::setReturn( const QString& arg_return_ )
{
    d_ptr->mReturn_nil = false;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:350
    d_ptr->mReturn = arg_return_;
}

QString NS__GetVersionResponse::return_() const
{
    return d_ptr->mReturn;
}

bool NS__GetVersionResponse::hasValueForReturn() const
{
    return d_ptr->mReturn_nil == false;
}

KDSoapValue NS__GetVersionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://axisversion.sample"), QString::fromLatin1("getVersionResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    mainValue.setQualified(true);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:567
    if (!d_ptr->mReturn_nil) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:98
        KDSoapValue _valueReturn = KDSoapValue(QString::fromLatin1("return"), QVariant::fromValue(d_ptr->mReturn), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
        _valueReturn.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
        _valueReturn.setQualified(true);
        _valueReturn.setNillable(true);
        args.append(_valueReturn);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    }
    return mainValue;
}

void NS__GetVersionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("return")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mReturn = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
            d_ptr->mReturn_nil = false;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:215
        }
    }
}

NS__GetVersionResponse::NS__GetVersionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NS__GetVersionResponse::~NS__GetVersionResponse()
{
}

NS__GetVersionResponse::NS__GetVersionResponse( const NS__GetVersionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NS__GetVersionResponse&  NS__GetVersionResponse::operator=( const NS__GetVersionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


Version::VersionSoap11BindingJobs::GetVersionJob::GetVersionJob( Version::VersionSoap11Binding* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void Version::VersionSoap11BindingJobs::GetVersionJob::setParameters( const NS__GetVersion& arg0 )
{
    mParameters = arg0;
}

NS__GetVersion Version::VersionSoap11BindingJobs::GetVersionJob::parameters() const
{
    return mParameters;
}

void Version::VersionSoap11BindingJobs::GetVersionJob::doStart()
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(mParameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("getVersion"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &GetVersionJob::slotFinished);
}

NS__GetVersionResponse Version::VersionSoap11BindingJobs::GetVersionJob::resultParameters() const
{
    return mResultParameters;
}

void Version::VersionSoap11BindingJobs::GetVersionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Version::VersionSoap12BindingJobs::GetVersionJob::GetVersionJob( Version::VersionSoap12Binding* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void Version::VersionSoap12BindingJobs::GetVersionJob::setParameters( const NS__GetVersion& arg0 )
{
    mParameters = arg0;
}

NS__GetVersion Version::VersionSoap12BindingJobs::GetVersionJob::parameters() const
{
    return mParameters;
}

void Version::VersionSoap12BindingJobs::GetVersionJob::doStart()
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(mParameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("getVersion"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &GetVersionJob::slotFinished);
}

NS__GetVersionResponse Version::VersionSoap12BindingJobs::GetVersionJob::resultParameters() const
{
    return mResultParameters;
}

void Version::VersionSoap12BindingJobs::GetVersionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class Version::VersionSoap11Binding::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

Version::VersionSoap11Binding::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(nullptr)
{
}


Version::VersionSoap11Binding::VersionSoap11Binding( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

Version::VersionSoap11Binding::~VersionSoap11Binding()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = nullptr;
}

void Version::VersionSoap11Binding::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void Version::VersionSoap11Binding::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString Version::VersionSoap11Binding::endPoint() const
{
    return d_ptr->m_endPoint;
}

void Version::VersionSoap11Binding::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion Version::VersionSoap11Binding::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int Version::VersionSoap11Binding::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString Version::VersionSoap11Binding::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString Version::VersionSoap11Binding::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *Version::VersionSoap11Binding::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://loancalcservice.herokuapp.com/services/Version.VersionHttpSoap11Endpoint/");
        const QString messageNamespace = QString::fromLatin1("http://axisversion.sample");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *Version::VersionSoap11Binding::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const VersionSoap11Binding*>( this )->clientInterface() );
}

NS__GetVersionResponse Version::VersionSoap11Binding::getVersion( const NS__GetVersion& parameters )
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(parameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("getVersion"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NS__GetVersionResponse();
    NS__GetVersionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void Version::VersionSoap11Binding::asyncGetVersion( const NS__GetVersion& parameters )
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(parameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("getVersion"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &VersionSoap11Binding::_kd_slotGetVersionFinished);
}

void Version::VersionSoap11Binding::_kd_slotGetVersionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getVersionError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("getVersion"), reply);
    } else {
        NS__GetVersionResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT getVersionDone( ret );
    }
    watcher->deleteLater();
}


class Version::VersionSoap12Binding::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

Version::VersionSoap12Binding::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(nullptr)
{
}


Version::VersionSoap12Binding::VersionSoap12Binding( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

Version::VersionSoap12Binding::~VersionSoap12Binding()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = nullptr;
}

void Version::VersionSoap12Binding::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void Version::VersionSoap12Binding::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString Version::VersionSoap12Binding::endPoint() const
{
    return d_ptr->m_endPoint;
}

void Version::VersionSoap12Binding::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion Version::VersionSoap12Binding::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int Version::VersionSoap12Binding::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString Version::VersionSoap12Binding::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString Version::VersionSoap12Binding::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *Version::VersionSoap12Binding::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://loancalcservice.herokuapp.com/services/Version.VersionHttpSoap12Endpoint/");
        const QString messageNamespace = QString::fromLatin1("http://axisversion.sample");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *Version::VersionSoap12Binding::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const VersionSoap12Binding*>( this )->clientInterface() );
}

NS__GetVersionResponse Version::VersionSoap12Binding::getVersion( const NS__GetVersion& parameters )
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(parameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("getVersion"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NS__GetVersionResponse();
    NS__GetVersionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void Version::VersionSoap12Binding::asyncGetVersion( const NS__GetVersion& parameters )
{
    const QString action = QString::fromLatin1("urn:getVersion");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetVersion(parameters.serialize(QString::fromLatin1("getVersion")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueGetVersion.setNamespaceUri(QString::fromLatin1("http://axisversion.sample"));
    _valueGetVersion.setQualified(true);
    message = _valueGetVersion;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("getVersion"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &VersionSoap12Binding::_kd_slotGetVersionFinished);
}

void Version::VersionSoap12Binding::_kd_slotGetVersionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getVersionError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("getVersion"), reply);
    } else {
        NS__GetVersionResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT getVersionDone( ret );
    }
    watcher->deleteLater();
}


