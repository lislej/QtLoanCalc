// This file is generated by KDAB's kdwsdl2cpp from LoanCalcService.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#pragma once

#include <QtCore/QString>
#include <QSharedPointer>
#include <QtCore/QSharedData>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapServer/KDSoapServerObjectInterface.h>
#include <KDSoapClient/KDSoapClientInterface.h>

#undef daylight
#undef timezone
class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
class LoanCalcService;
class TNS__CalcLoanAmt;
class TNS__CalcLoanAmtResponse;
class TNS__CalcLoanPmt;
class TNS__CalcLoanPmtResponse;
class TNS__CalcLoanRate;
class TNS__CalcLoanRateResponse;
class TNS__CalcLoanTerm;
class TNS__CalcLoanTermResponse;
class TNS__CheckEmail;
class TNS__CheckEmailResponse;
class TNS__DeleteEmailPIN;
class TNS__DeleteEmailPINResponse;
class TNS__VerifyEmailPIN;
class TNS__VerifyEmailPINResponse;

class TNS__CalcLoanAmt
{
public:
    void setLoanPmt( double arg_loanPmt );
    double loanPmt() const;
    void setLoanTerm( int arg_loanTerm );
    int loanTerm() const;
    void setLoanRate( double arg_loanRate );
    double loanRate() const;
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanAmt();
    ~TNS__CalcLoanAmt();

public:
    TNS__CalcLoanAmt( const TNS__CalcLoanAmt& );
    TNS__CalcLoanAmt &operator=( const TNS__CalcLoanAmt& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanAmtResponse
{
public:
    void setLoanAmt( double arg_loanAmt );
    double loanAmt() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanAmtResponse();
    ~TNS__CalcLoanAmtResponse();

public:
    TNS__CalcLoanAmtResponse( const TNS__CalcLoanAmtResponse& );
    TNS__CalcLoanAmtResponse &operator=( const TNS__CalcLoanAmtResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanPmt
{
public:
    void setLoanAmt( double arg_loanAmt );
    double loanAmt() const;
    void setLoanRate( double arg_loanRate );
    double loanRate() const;
    void setLoanTerm( int arg_loanTerm );
    int loanTerm() const;
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanPmt();
    ~TNS__CalcLoanPmt();

public:
    TNS__CalcLoanPmt( const TNS__CalcLoanPmt& );
    TNS__CalcLoanPmt &operator=( const TNS__CalcLoanPmt& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanPmtResponse
{
public:
    void setLoanPmt( double arg_loanPmt );
    double loanPmt() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanPmtResponse();
    ~TNS__CalcLoanPmtResponse();

public:
    TNS__CalcLoanPmtResponse( const TNS__CalcLoanPmtResponse& );
    TNS__CalcLoanPmtResponse &operator=( const TNS__CalcLoanPmtResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanRate
{
public:
    void setLoanAmt( double arg_loanAmt );
    double loanAmt() const;
    void setLoanPmt( double arg_loanPmt );
    double loanPmt() const;
    void setLoanTerm( int arg_loanTerm );
    int loanTerm() const;
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanRate();
    ~TNS__CalcLoanRate();

public:
    TNS__CalcLoanRate( const TNS__CalcLoanRate& );
    TNS__CalcLoanRate &operator=( const TNS__CalcLoanRate& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanRateResponse
{
public:
    void setLoanRate( double arg_loanRate );
    double loanRate() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanRateResponse();
    ~TNS__CalcLoanRateResponse();

public:
    TNS__CalcLoanRateResponse( const TNS__CalcLoanRateResponse& );
    TNS__CalcLoanRateResponse &operator=( const TNS__CalcLoanRateResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanTerm
{
public:
    void setLoanAmt( double arg_loanAmt );
    double loanAmt() const;
    void setLoanRate( double arg_loanRate );
    double loanRate() const;
    void setLoanPmt( double arg_loanPmt );
    double loanPmt() const;
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanTerm();
    ~TNS__CalcLoanTerm();

public:
    TNS__CalcLoanTerm( const TNS__CalcLoanTerm& );
    TNS__CalcLoanTerm &operator=( const TNS__CalcLoanTerm& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CalcLoanTermResponse
{
public:
    void setLoanTerm( int arg_loanTerm );
    int loanTerm() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CalcLoanTermResponse();
    ~TNS__CalcLoanTermResponse();

public:
    TNS__CalcLoanTermResponse( const TNS__CalcLoanTermResponse& );
    TNS__CalcLoanTermResponse &operator=( const TNS__CalcLoanTermResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CheckEmail
{
public:
    void setEmailAddress( const QString& arg_emailAddress );
    QString emailAddress() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CheckEmail();
    ~TNS__CheckEmail();

public:
    TNS__CheckEmail( const TNS__CheckEmail& );
    TNS__CheckEmail &operator=( const TNS__CheckEmail& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CheckEmailResponse
{
public:
    void setResponse( const QString& arg_response );
    QString response() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CheckEmailResponse();
    ~TNS__CheckEmailResponse();

public:
    TNS__CheckEmailResponse( const TNS__CheckEmailResponse& );
    TNS__CheckEmailResponse &operator=( const TNS__CheckEmailResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteEmailPIN
{
public:
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteEmailPIN();
    ~TNS__DeleteEmailPIN();

public:
    TNS__DeleteEmailPIN( const TNS__DeleteEmailPIN& );
    TNS__DeleteEmailPIN &operator=( const TNS__DeleteEmailPIN& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteEmailPINResponse
{
public:
    void setResponse( const QString& arg_response );
    QString response() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteEmailPINResponse();
    ~TNS__DeleteEmailPINResponse();

public:
    TNS__DeleteEmailPINResponse( const TNS__DeleteEmailPINResponse& );
    TNS__DeleteEmailPINResponse &operator=( const TNS__DeleteEmailPINResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__VerifyEmailPIN
{
public:
    void setEmailAddress( const QString& arg_emailAddress );
    QString emailAddress() const;
    void setEmailPIN( const QString& arg_emailPIN );
    QString emailPIN() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__VerifyEmailPIN();
    ~TNS__VerifyEmailPIN();

public:
    TNS__VerifyEmailPIN( const TNS__VerifyEmailPIN& );
    TNS__VerifyEmailPIN &operator=( const TNS__VerifyEmailPIN& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__VerifyEmailPINResponse
{
public:
    void setResponse( const QString& arg_response );
    QString response() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__VerifyEmailPINResponse();
    ~TNS__VerifyEmailPINResponse();

public:
    TNS__VerifyEmailPINResponse( const TNS__VerifyEmailPINResponse& );
    TNS__VerifyEmailPINResponse &operator=( const TNS__VerifyEmailPINResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class CalcLoanAmtJob : public KDSoapJob
{
    Q_OBJECT

public:
    CalcLoanAmtJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__CalcLoanAmt& arg0 );
    TNS__CalcLoanAmt parameters() const;
    TNS__CalcLoanAmtResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__CalcLoanAmt mParameters;
    TNS__CalcLoanAmtResponse mResultParameters;
};

class CalcLoanPmtJob : public KDSoapJob
{
    Q_OBJECT

public:
    CalcLoanPmtJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__CalcLoanPmt& arg0 );
    TNS__CalcLoanPmt parameters() const;
    TNS__CalcLoanPmtResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__CalcLoanPmt mParameters;
    TNS__CalcLoanPmtResponse mResultParameters;
};

class CalcLoanRateJob : public KDSoapJob
{
    Q_OBJECT

public:
    CalcLoanRateJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__CalcLoanRate& arg0 );
    TNS__CalcLoanRate parameters() const;
    TNS__CalcLoanRateResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__CalcLoanRate mParameters;
    TNS__CalcLoanRateResponse mResultParameters;
};

class CalcLoanTermJob : public KDSoapJob
{
    Q_OBJECT

public:
    CalcLoanTermJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__CalcLoanTerm& arg0 );
    TNS__CalcLoanTerm parameters() const;
    TNS__CalcLoanTermResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__CalcLoanTerm mParameters;
    TNS__CalcLoanTermResponse mResultParameters;
};

class CheckEmailJob : public KDSoapJob
{
    Q_OBJECT

public:
    CheckEmailJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__CheckEmail& arg0 );
    TNS__CheckEmail parameters() const;
    TNS__CheckEmailResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__CheckEmail mParameters;
    TNS__CheckEmailResponse mResultParameters;
};

class DeleteEmailPINJob : public KDSoapJob
{
    Q_OBJECT

public:
    DeleteEmailPINJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__DeleteEmailPIN& arg0 );
    TNS__DeleteEmailPIN parameters() const;
    TNS__DeleteEmailPINResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__DeleteEmailPIN mParameters;
    TNS__DeleteEmailPINResponse mResultParameters;
};

class VerifyEmailPINJob : public KDSoapJob
{
    Q_OBJECT

public:
    VerifyEmailPINJob( LoanCalcService* service, QObject* _parent = nullptr );
    void setParameters( const TNS__VerifyEmailPIN& arg0 );
    TNS__VerifyEmailPIN parameters() const;
    TNS__VerifyEmailPINResponse resultParameters() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    LoanCalcService *mService;
    TNS__VerifyEmailPIN mParameters;
    TNS__VerifyEmailPINResponse mResultParameters;
};

class LoanCalcServiceServerBase : public QObject, public KDSoapServerObjectInterface
{
    Q_OBJECT

    Q_INTERFACES(KDSoapServerObjectInterface)

public:
    void calcLoanAmtResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__CalcLoanAmtResponse& ret );
    virtual TNS__CalcLoanAmtResponse calcLoanAmt( const TNS__CalcLoanAmt& parameters ) = 0;
    void calcLoanPmtResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__CalcLoanPmtResponse& ret );
    virtual TNS__CalcLoanPmtResponse calcLoanPmt( const TNS__CalcLoanPmt& parameters ) = 0;
    void calcLoanTermResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__CalcLoanTermResponse& ret );
    virtual TNS__CalcLoanTermResponse calcLoanTerm( const TNS__CalcLoanTerm& parameters ) = 0;
    void calcLoanRateResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__CalcLoanRateResponse& ret );
    virtual TNS__CalcLoanRateResponse calcLoanRate( const TNS__CalcLoanRate& parameters ) = 0;
    void checkEmailResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__CheckEmailResponse& ret );
    virtual TNS__CheckEmailResponse checkEmail( const TNS__CheckEmail& parameters ) = 0;
    void verifyEmailPINResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__VerifyEmailPINResponse& ret );
    virtual TNS__VerifyEmailPINResponse verifyEmailPIN( const TNS__VerifyEmailPIN& parameters ) = 0;
    void deleteEmailPINResponse( const KDSoapDelayedResponseHandle& responseHandle, const TNS__DeleteEmailPINResponse& ret );
    virtual TNS__DeleteEmailPINResponse deleteEmailPIN( const TNS__DeleteEmailPIN& parameters ) = 0;
    virtual void processRequest( const KDSoapMessage &_request, KDSoapMessage &_response, const QByteArray& _soapAction ) override;

};

class LoanCalcService : public QObject
{
    Q_OBJECT

public:
    LoanCalcService( QObject* _parent = nullptr );
    ~LoanCalcService();
    /**
        Asks Qt to ignore ssl errors in https requests. Use this for testing
        only!
     */
    void ignoreSslErrors();
    /**
        Overwrite the end point defined in the .wsdl file, with another
        http/https URL.
     */
    void setEndPoint( const QString& endPoint );
    /**
        Return the end point that will be used.
     */
    QString endPoint() const;
    /**
        Overwrite the soap version defined in the .wsdl file, with another
        version.
        version can be KDSoapClientInterface::SOAP1_1 or
        KDSoapClientInterface::SOAP1_2
     */
    void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
    /**
        Return the soap version used.n
     */
    KDSoapClientInterface::SoapVersion soapVersion() const;
    /**
        Return the fault code from the last blocking call.
        Empty if no error.
     */
    int lastErrorCode() const;
    /**
        Return the fault code from the last blocking call.
        Empty if no error.
     */
    QString lastFaultCode() const;
    /**
        Return the error from the last blocking call.
        Empty if no error.
     */
    QString lastError() const;
    /**
        Returns the underlying KDSoapClientInterface instance, which allows to
        access setCookieJar, lastResponseHeaders, etc.
     */
    const KDSoapClientInterface *clientInterface() const;
    KDSoapClientInterface *clientInterface();
    /**
        Blocking call to CalcLoanAmt.
        Not recommended in a GUI thread.
     */
    TNS__CalcLoanAmtResponse calcLoanAmt( const TNS__CalcLoanAmt& parameters );
    /**
        Asynchronous call to CalcLoanAmt.
        Remember to connect to calcLoanAmtDone and
        calcLoanAmtError.
        Deprecated, use CalcLoanAmtJob instead.
     */
    void asyncCalcLoanAmt( const TNS__CalcLoanAmt& parameters );
    /**
        Blocking call to CalcLoanPmt.
        Not recommended in a GUI thread.
     */
    TNS__CalcLoanPmtResponse calcLoanPmt( const TNS__CalcLoanPmt& parameters );
    /**
        Asynchronous call to CalcLoanPmt.
        Remember to connect to calcLoanPmtDone and
        calcLoanPmtError.
        Deprecated, use CalcLoanPmtJob instead.
     */
    void asyncCalcLoanPmt( const TNS__CalcLoanPmt& parameters );
    /**
        Blocking call to CalcLoanTerm.
        Not recommended in a GUI thread.
     */
    TNS__CalcLoanTermResponse calcLoanTerm( const TNS__CalcLoanTerm& parameters );
    /**
        Asynchronous call to CalcLoanTerm.
        Remember to connect to calcLoanTermDone and
        calcLoanTermError.
        Deprecated, use CalcLoanTermJob instead.
     */
    void asyncCalcLoanTerm( const TNS__CalcLoanTerm& parameters );
    /**
        Blocking call to CalcLoanRate.
        Not recommended in a GUI thread.
     */
    TNS__CalcLoanRateResponse calcLoanRate( const TNS__CalcLoanRate& parameters );
    /**
        Asynchronous call to CalcLoanRate.
        Remember to connect to calcLoanRateDone and
        calcLoanRateError.
        Deprecated, use CalcLoanRateJob instead.
     */
    void asyncCalcLoanRate( const TNS__CalcLoanRate& parameters );
    /**
        Blocking call to CheckEmail.
        Not recommended in a GUI thread.
     */
    TNS__CheckEmailResponse checkEmail( const TNS__CheckEmail& parameters );
    /**
        Asynchronous call to CheckEmail.
        Remember to connect to checkEmailDone and checkEmailError.
        Deprecated, use CheckEmailJob instead.
     */
    void asyncCheckEmail( const TNS__CheckEmail& parameters );
    /**
        Blocking call to VerifyEmailPIN.
        Not recommended in a GUI thread.
     */
    TNS__VerifyEmailPINResponse verifyEmailPIN( const TNS__VerifyEmailPIN& parameters );
    /**
        Asynchronous call to VerifyEmailPIN.
        Remember to connect to verifyEmailPINDone and
        verifyEmailPINError.
        Deprecated, use VerifyEmailPINJob instead.
     */
    void asyncVerifyEmailPIN( const TNS__VerifyEmailPIN& parameters );
    /**
        Blocking call to DeleteEmailPIN.
        Not recommended in a GUI thread.
     */
    TNS__DeleteEmailPINResponse deleteEmailPIN( const TNS__DeleteEmailPIN& parameters );
    /**
        Asynchronous call to DeleteEmailPIN.
        Remember to connect to deleteEmailPINDone and
        deleteEmailPINError.
        Deprecated, use DeleteEmailPINJob instead.
     */
    void asyncDeleteEmailPIN( const TNS__DeleteEmailPIN& parameters );

Q_SIGNALS:
    /**
        This signal is emitted whenever a SOAP call failed, for a central
        processing of all SOAP errors.
        method is the name of the method (or operation) that returned the
        fault, for instance "addContact".
     */
    void soapError( const QString& method, const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanAmt() has succeeded.
     */
    void calcLoanAmtDone( const TNS__CalcLoanAmtResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanAmt() has failed.
     */
    void calcLoanAmtError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanPmt() has succeeded.
     */
    void calcLoanPmtDone( const TNS__CalcLoanPmtResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanPmt() has failed.
     */
    void calcLoanPmtError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanTerm() has succeeded.
     */
    void calcLoanTermDone( const TNS__CalcLoanTermResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanTerm() has failed.
     */
    void calcLoanTermError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanRate() has succeeded.
     */
    void calcLoanRateDone( const TNS__CalcLoanRateResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncCalcLoanRate() has failed.
     */
    void calcLoanRateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call asyncCheckEmail()
        has succeeded.
     */
    void checkEmailDone( const TNS__CheckEmailResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call asyncCheckEmail()
        has failed.
     */
    void checkEmailError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncVerifyEmailPIN() has succeeded.
     */
    void verifyEmailPINDone( const TNS__VerifyEmailPINResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncVerifyEmailPIN() has failed.
     */
    void verifyEmailPINError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call
        asyncDeleteEmailPIN() has succeeded.
     */
    void deleteEmailPINDone( const TNS__DeleteEmailPINResponse& parameters );
    /**
        This signal is emitted whenever the asynchronous call
        asyncDeleteEmailPIN() has failed.
     */
    void deleteEmailPINError( const KDSoapMessage& fault );

private Q_SLOTS:
    void _kd_slotCalcLoanAmtFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCalcLoanPmtFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCalcLoanTermFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCalcLoanRateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCheckEmailFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotVerifyEmailPINFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotDeleteEmailPINFinished( KDSoapPendingCallWatcher* watcher );

private:
    class PrivateDPtr;
    PrivateDPtr *d_ptr;
};

