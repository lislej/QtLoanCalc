// This file is generated by KDAB's kdwsdl2cpp from LoanCalcService.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "wsdl_LoanCalcService.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

class TNS__CalcLoanAmt::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanPmt;
    int mLoanTerm;
    double mLoanRate;
    QString mEmailPIN;
};

TNS__CalcLoanAmt::PrivateDPtr::PrivateDPtr()
    : mLoanPmt(0), mLoanTerm(0), mLoanRate(0)
{
}


void TNS__CalcLoanAmt::setLoanPmt( double arg_loanPmt )
{
    d_ptr->mLoanPmt = arg_loanPmt;
}

double TNS__CalcLoanAmt::loanPmt() const
{
    return d_ptr->mLoanPmt;
}

void TNS__CalcLoanAmt::setLoanTerm( int arg_loanTerm )
{
    d_ptr->mLoanTerm = arg_loanTerm;
}

int TNS__CalcLoanAmt::loanTerm() const
{
    return d_ptr->mLoanTerm;
}

void TNS__CalcLoanAmt::setLoanRate( double arg_loanRate )
{
    d_ptr->mLoanRate = arg_loanRate;
}

double TNS__CalcLoanAmt::loanRate() const
{
    return d_ptr->mLoanRate;
}

void TNS__CalcLoanAmt::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__CalcLoanAmt::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__CalcLoanAmt::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanAmt"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanPmt = KDSoapValue(QString::fromLatin1("loanPmt"), QVariant::fromValue(d_ptr->mLoanPmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanPmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanTerm = KDSoapValue(QString::fromLatin1("loanTerm"), QVariant::fromValue(d_ptr->mLoanTerm), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanTerm);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanRate = KDSoapValue(QString::fromLatin1("loanRate"), QVariant::fromValue(d_ptr->mLoanRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanRate);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanAmt::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanPmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanPmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanTerm")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanTerm = val.value().value<int>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanRate")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanRate = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanAmt::TNS__CalcLoanAmt()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanAmt::~TNS__CalcLoanAmt()
{
}

TNS__CalcLoanAmt::TNS__CalcLoanAmt( const TNS__CalcLoanAmt& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanAmt&  TNS__CalcLoanAmt::operator=( const TNS__CalcLoanAmt& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanAmtResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanAmt;
};

TNS__CalcLoanAmtResponse::PrivateDPtr::PrivateDPtr()
    : mLoanAmt(0)
{
}


void TNS__CalcLoanAmtResponse::setLoanAmt( double arg_loanAmt )
{
    d_ptr->mLoanAmt = arg_loanAmt;
}

double TNS__CalcLoanAmtResponse::loanAmt() const
{
    return d_ptr->mLoanAmt;
}

KDSoapValue TNS__CalcLoanAmtResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanAmtResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanAmt = KDSoapValue(QString::fromLatin1("loanAmt"), QVariant::fromValue(d_ptr->mLoanAmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanAmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanAmtResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanAmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanAmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanAmtResponse::TNS__CalcLoanAmtResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanAmtResponse::~TNS__CalcLoanAmtResponse()
{
}

TNS__CalcLoanAmtResponse::TNS__CalcLoanAmtResponse( const TNS__CalcLoanAmtResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanAmtResponse&  TNS__CalcLoanAmtResponse::operator=( const TNS__CalcLoanAmtResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanPmt::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanAmt;
    double mLoanRate;
    int mLoanTerm;
    QString mEmailPIN;
};

TNS__CalcLoanPmt::PrivateDPtr::PrivateDPtr()
    : mLoanAmt(0), mLoanRate(0), mLoanTerm(0)
{
}


void TNS__CalcLoanPmt::setLoanAmt( double arg_loanAmt )
{
    d_ptr->mLoanAmt = arg_loanAmt;
}

double TNS__CalcLoanPmt::loanAmt() const
{
    return d_ptr->mLoanAmt;
}

void TNS__CalcLoanPmt::setLoanRate( double arg_loanRate )
{
    d_ptr->mLoanRate = arg_loanRate;
}

double TNS__CalcLoanPmt::loanRate() const
{
    return d_ptr->mLoanRate;
}

void TNS__CalcLoanPmt::setLoanTerm( int arg_loanTerm )
{
    d_ptr->mLoanTerm = arg_loanTerm;
}

int TNS__CalcLoanPmt::loanTerm() const
{
    return d_ptr->mLoanTerm;
}

void TNS__CalcLoanPmt::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__CalcLoanPmt::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__CalcLoanPmt::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanPmt"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanAmt = KDSoapValue(QString::fromLatin1("loanAmt"), QVariant::fromValue(d_ptr->mLoanAmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanAmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanRate = KDSoapValue(QString::fromLatin1("loanRate"), QVariant::fromValue(d_ptr->mLoanRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanRate);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanTerm = KDSoapValue(QString::fromLatin1("loanTerm"), QVariant::fromValue(d_ptr->mLoanTerm), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanTerm);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanPmt::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanAmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanAmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanRate")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanRate = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanTerm")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanTerm = val.value().value<int>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanPmt::TNS__CalcLoanPmt()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanPmt::~TNS__CalcLoanPmt()
{
}

TNS__CalcLoanPmt::TNS__CalcLoanPmt( const TNS__CalcLoanPmt& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanPmt&  TNS__CalcLoanPmt::operator=( const TNS__CalcLoanPmt& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanPmtResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanPmt;
};

TNS__CalcLoanPmtResponse::PrivateDPtr::PrivateDPtr()
    : mLoanPmt(0)
{
}


void TNS__CalcLoanPmtResponse::setLoanPmt( double arg_loanPmt )
{
    d_ptr->mLoanPmt = arg_loanPmt;
}

double TNS__CalcLoanPmtResponse::loanPmt() const
{
    return d_ptr->mLoanPmt;
}

KDSoapValue TNS__CalcLoanPmtResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanPmtResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanPmt = KDSoapValue(QString::fromLatin1("loanPmt"), QVariant::fromValue(d_ptr->mLoanPmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanPmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanPmtResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanPmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanPmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanPmtResponse::TNS__CalcLoanPmtResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanPmtResponse::~TNS__CalcLoanPmtResponse()
{
}

TNS__CalcLoanPmtResponse::TNS__CalcLoanPmtResponse( const TNS__CalcLoanPmtResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanPmtResponse&  TNS__CalcLoanPmtResponse::operator=( const TNS__CalcLoanPmtResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanRate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanAmt;
    double mLoanPmt;
    int mLoanTerm;
    QString mEmailPIN;
};

TNS__CalcLoanRate::PrivateDPtr::PrivateDPtr()
    : mLoanAmt(0), mLoanPmt(0), mLoanTerm(0)
{
}


void TNS__CalcLoanRate::setLoanAmt( double arg_loanAmt )
{
    d_ptr->mLoanAmt = arg_loanAmt;
}

double TNS__CalcLoanRate::loanAmt() const
{
    return d_ptr->mLoanAmt;
}

void TNS__CalcLoanRate::setLoanPmt( double arg_loanPmt )
{
    d_ptr->mLoanPmt = arg_loanPmt;
}

double TNS__CalcLoanRate::loanPmt() const
{
    return d_ptr->mLoanPmt;
}

void TNS__CalcLoanRate::setLoanTerm( int arg_loanTerm )
{
    d_ptr->mLoanTerm = arg_loanTerm;
}

int TNS__CalcLoanRate::loanTerm() const
{
    return d_ptr->mLoanTerm;
}

void TNS__CalcLoanRate::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__CalcLoanRate::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__CalcLoanRate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanRate"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanAmt = KDSoapValue(QString::fromLatin1("loanAmt"), QVariant::fromValue(d_ptr->mLoanAmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanAmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanPmt = KDSoapValue(QString::fromLatin1("loanPmt"), QVariant::fromValue(d_ptr->mLoanPmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanPmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanTerm = KDSoapValue(QString::fromLatin1("loanTerm"), QVariant::fromValue(d_ptr->mLoanTerm), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanTerm);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanRate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanAmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanAmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanPmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanPmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanTerm")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanTerm = val.value().value<int>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanRate::TNS__CalcLoanRate()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanRate::~TNS__CalcLoanRate()
{
}

TNS__CalcLoanRate::TNS__CalcLoanRate( const TNS__CalcLoanRate& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanRate&  TNS__CalcLoanRate::operator=( const TNS__CalcLoanRate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanRateResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanRate;
};

TNS__CalcLoanRateResponse::PrivateDPtr::PrivateDPtr()
    : mLoanRate(0)
{
}


void TNS__CalcLoanRateResponse::setLoanRate( double arg_loanRate )
{
    d_ptr->mLoanRate = arg_loanRate;
}

double TNS__CalcLoanRateResponse::loanRate() const
{
    return d_ptr->mLoanRate;
}

KDSoapValue TNS__CalcLoanRateResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanRateResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanRate = KDSoapValue(QString::fromLatin1("loanRate"), QVariant::fromValue(d_ptr->mLoanRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanRate);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanRateResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanRate")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanRate = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanRateResponse::TNS__CalcLoanRateResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanRateResponse::~TNS__CalcLoanRateResponse()
{
}

TNS__CalcLoanRateResponse::TNS__CalcLoanRateResponse( const TNS__CalcLoanRateResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanRateResponse&  TNS__CalcLoanRateResponse::operator=( const TNS__CalcLoanRateResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanTerm::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    double mLoanAmt;
    double mLoanRate;
    double mLoanPmt;
    QString mEmailPIN;
};

TNS__CalcLoanTerm::PrivateDPtr::PrivateDPtr()
    : mLoanAmt(0), mLoanRate(0), mLoanPmt(0)
{
}


void TNS__CalcLoanTerm::setLoanAmt( double arg_loanAmt )
{
    d_ptr->mLoanAmt = arg_loanAmt;
}

double TNS__CalcLoanTerm::loanAmt() const
{
    return d_ptr->mLoanAmt;
}

void TNS__CalcLoanTerm::setLoanRate( double arg_loanRate )
{
    d_ptr->mLoanRate = arg_loanRate;
}

double TNS__CalcLoanTerm::loanRate() const
{
    return d_ptr->mLoanRate;
}

void TNS__CalcLoanTerm::setLoanPmt( double arg_loanPmt )
{
    d_ptr->mLoanPmt = arg_loanPmt;
}

double TNS__CalcLoanTerm::loanPmt() const
{
    return d_ptr->mLoanPmt;
}

void TNS__CalcLoanTerm::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__CalcLoanTerm::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__CalcLoanTerm::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanTerm"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanAmt = KDSoapValue(QString::fromLatin1("loanAmt"), QVariant::fromValue(d_ptr->mLoanAmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanAmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanRate = KDSoapValue(QString::fromLatin1("loanRate"), QVariant::fromValue(d_ptr->mLoanRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanRate);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueLoanPmt = KDSoapValue(QString::fromLatin1("loanPmt"), QVariant::fromValue(d_ptr->mLoanPmt), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanPmt);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanTerm::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanAmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanAmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanRate")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanRate = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("loanPmt")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanPmt = val.value().value<double>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanTerm::TNS__CalcLoanTerm()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanTerm::~TNS__CalcLoanTerm()
{
}

TNS__CalcLoanTerm::TNS__CalcLoanTerm( const TNS__CalcLoanTerm& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanTerm&  TNS__CalcLoanTerm::operator=( const TNS__CalcLoanTerm& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CalcLoanTermResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mLoanTerm;
};

TNS__CalcLoanTermResponse::PrivateDPtr::PrivateDPtr()
    : mLoanTerm(0)
{
}


void TNS__CalcLoanTermResponse::setLoanTerm( int arg_loanTerm )
{
    d_ptr->mLoanTerm = arg_loanTerm;
}

int TNS__CalcLoanTermResponse::loanTerm() const
{
    return d_ptr->mLoanTerm;
}

KDSoapValue TNS__CalcLoanTermResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CalcLoanTermResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueLoanTerm = KDSoapValue(QString::fromLatin1("loanTerm"), QVariant::fromValue(d_ptr->mLoanTerm), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueLoanTerm);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CalcLoanTermResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("loanTerm")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mLoanTerm = val.value().value<int>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CalcLoanTermResponse::TNS__CalcLoanTermResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CalcLoanTermResponse::~TNS__CalcLoanTermResponse()
{
}

TNS__CalcLoanTermResponse::TNS__CalcLoanTermResponse( const TNS__CalcLoanTermResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CalcLoanTermResponse&  TNS__CalcLoanTermResponse::operator=( const TNS__CalcLoanTermResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CheckEmail::PrivateDPtr : public QSharedData
{
public:
    QString mEmailAddress;
};

void TNS__CheckEmail::setEmailAddress( const QString& arg_emailAddress )
{
    d_ptr->mEmailAddress = arg_emailAddress;
}

QString TNS__CheckEmail::emailAddress() const
{
    return d_ptr->mEmailAddress;
}

KDSoapValue TNS__CheckEmail::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CheckEmail"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueEmailAddress = KDSoapValue(QString::fromLatin1("EmailAddress"), QVariant::fromValue(d_ptr->mEmailAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailAddress.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailAddress);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CheckEmail::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("EmailAddress")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailAddress = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CheckEmail::TNS__CheckEmail()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CheckEmail::~TNS__CheckEmail()
{
}

TNS__CheckEmail::TNS__CheckEmail( const TNS__CheckEmail& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CheckEmail&  TNS__CheckEmail::operator=( const TNS__CheckEmail& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CheckEmailResponse::PrivateDPtr : public QSharedData
{
public:
    QString mResponse;
};

void TNS__CheckEmailResponse::setResponse( const QString& arg_response )
{
    d_ptr->mResponse = arg_response;
}

QString TNS__CheckEmailResponse::response() const
{
    return d_ptr->mResponse;
}

KDSoapValue TNS__CheckEmailResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("CheckEmailResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueResponse = KDSoapValue(QString::fromLatin1("Response"), QVariant::fromValue(d_ptr->mResponse), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueResponse.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueResponse);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__CheckEmailResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("Response")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mResponse = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__CheckEmailResponse::TNS__CheckEmailResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CheckEmailResponse::~TNS__CheckEmailResponse()
{
}

TNS__CheckEmailResponse::TNS__CheckEmailResponse( const TNS__CheckEmailResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CheckEmailResponse&  TNS__CheckEmailResponse::operator=( const TNS__CheckEmailResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__DeleteEmailPIN::PrivateDPtr : public QSharedData
{
public:
    QString mEmailPIN;
};

void TNS__DeleteEmailPIN::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__DeleteEmailPIN::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__DeleteEmailPIN::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("DeleteEmailPIN"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__DeleteEmailPIN::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__DeleteEmailPIN::TNS__DeleteEmailPIN()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteEmailPIN::~TNS__DeleteEmailPIN()
{
}

TNS__DeleteEmailPIN::TNS__DeleteEmailPIN( const TNS__DeleteEmailPIN& other )
    : d_ptr( other.d_ptr )
{
}

TNS__DeleteEmailPIN&  TNS__DeleteEmailPIN::operator=( const TNS__DeleteEmailPIN& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__DeleteEmailPINResponse::PrivateDPtr : public QSharedData
{
public:
    QString mResponse;
};

void TNS__DeleteEmailPINResponse::setResponse( const QString& arg_response )
{
    d_ptr->mResponse = arg_response;
}

QString TNS__DeleteEmailPINResponse::response() const
{
    return d_ptr->mResponse;
}

KDSoapValue TNS__DeleteEmailPINResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("DeleteEmailPINResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueResponse = KDSoapValue(QString::fromLatin1("Response"), QVariant::fromValue(d_ptr->mResponse), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueResponse.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueResponse);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__DeleteEmailPINResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("Response")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mResponse = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__DeleteEmailPINResponse::TNS__DeleteEmailPINResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteEmailPINResponse::~TNS__DeleteEmailPINResponse()
{
}

TNS__DeleteEmailPINResponse::TNS__DeleteEmailPINResponse( const TNS__DeleteEmailPINResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__DeleteEmailPINResponse&  TNS__DeleteEmailPINResponse::operator=( const TNS__DeleteEmailPINResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__VerifyEmailPIN::PrivateDPtr : public QSharedData
{
public:
    QString mEmailAddress;
    QString mEmailPIN;
};

void TNS__VerifyEmailPIN::setEmailAddress( const QString& arg_emailAddress )
{
    d_ptr->mEmailAddress = arg_emailAddress;
}

QString TNS__VerifyEmailPIN::emailAddress() const
{
    return d_ptr->mEmailAddress;
}

void TNS__VerifyEmailPIN::setEmailPIN( const QString& arg_emailPIN )
{
    d_ptr->mEmailPIN = arg_emailPIN;
}

QString TNS__VerifyEmailPIN::emailPIN() const
{
    return d_ptr->mEmailPIN;
}

KDSoapValue TNS__VerifyEmailPIN::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("VerifyEmailPIN"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueEmailAddress = KDSoapValue(QString::fromLatin1("EmailAddress"), QVariant::fromValue(d_ptr->mEmailAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailAddress.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailAddress);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapValue _valueEmailPIN = KDSoapValue(QString::fromLatin1("EmailPIN"), QVariant::fromValue(d_ptr->mEmailPIN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueEmailPIN);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__VerifyEmailPIN::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("EmailAddress")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailAddress = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
        else if (_name == QLatin1String("EmailPIN")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mEmailPIN = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__VerifyEmailPIN::TNS__VerifyEmailPIN()
    : d_ptr(new PrivateDPtr)
{
}

TNS__VerifyEmailPIN::~TNS__VerifyEmailPIN()
{
}

TNS__VerifyEmailPIN::TNS__VerifyEmailPIN( const TNS__VerifyEmailPIN& other )
    : d_ptr( other.d_ptr )
{
}

TNS__VerifyEmailPIN&  TNS__VerifyEmailPIN::operator=( const TNS__VerifyEmailPIN& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__VerifyEmailPINResponse::PrivateDPtr : public QSharedData
{
public:
    QString mResponse;
};

void TNS__VerifyEmailPINResponse::setResponse( const QString& arg_response )
{
    d_ptr->mResponse = arg_response;
}

QString TNS__VerifyEmailPINResponse::response() const
{
    return d_ptr->mResponse;
}

KDSoapValue TNS__VerifyEmailPINResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"), QString::fromLatin1("VerifyEmailPINResponse"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:544
    KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:565
    KDSoapValue _valueResponse = KDSoapValue(QString::fromLatin1("Response"), QVariant::fromValue(d_ptr->mResponse), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:111
    _valueResponse.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    args.append(_valueResponse);// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    return mainValue;
}

void TNS__VerifyEmailPINResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:561
    for (const KDSoapValue& val : qAsConst(args)) {
        const QString _name = val.name();
        if (_name == QLatin1String("Response")) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_complextype.cpp:481
            d_ptr->mResponse = val.value().value<QString>();// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:208
        }
    }
}

TNS__VerifyEmailPINResponse::TNS__VerifyEmailPINResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__VerifyEmailPINResponse::~TNS__VerifyEmailPINResponse()
{
}

TNS__VerifyEmailPINResponse::TNS__VerifyEmailPINResponse( const TNS__VerifyEmailPINResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__VerifyEmailPINResponse&  TNS__VerifyEmailPINResponse::operator=( const TNS__VerifyEmailPINResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


CalcLoanAmtJob::CalcLoanAmtJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void CalcLoanAmtJob::setParameters( const TNS__CalcLoanAmt& arg0 )
{
    mParameters = arg0;
}

TNS__CalcLoanAmt CalcLoanAmtJob::parameters() const
{
    return mParameters;
}

void CalcLoanAmtJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanAmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanAmt(mParameters.serialize(QString::fromLatin1("CalcLoanAmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanAmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CalcLoanAmt"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &CalcLoanAmtJob::slotFinished);
}

TNS__CalcLoanAmtResponse CalcLoanAmtJob::resultParameters() const
{
    return mResultParameters;
}

void CalcLoanAmtJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


CalcLoanPmtJob::CalcLoanPmtJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void CalcLoanPmtJob::setParameters( const TNS__CalcLoanPmt& arg0 )
{
    mParameters = arg0;
}

TNS__CalcLoanPmt CalcLoanPmtJob::parameters() const
{
    return mParameters;
}

void CalcLoanPmtJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanPmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanPmt(mParameters.serialize(QString::fromLatin1("CalcLoanPmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanPmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CalcLoanPmt"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &CalcLoanPmtJob::slotFinished);
}

TNS__CalcLoanPmtResponse CalcLoanPmtJob::resultParameters() const
{
    return mResultParameters;
}

void CalcLoanPmtJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


CalcLoanRateJob::CalcLoanRateJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void CalcLoanRateJob::setParameters( const TNS__CalcLoanRate& arg0 )
{
    mParameters = arg0;
}

TNS__CalcLoanRate CalcLoanRateJob::parameters() const
{
    return mParameters;
}

void CalcLoanRateJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanRate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanRate(mParameters.serialize(QString::fromLatin1("CalcLoanRate")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanRate;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CalcLoanRate"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &CalcLoanRateJob::slotFinished);
}

TNS__CalcLoanRateResponse CalcLoanRateJob::resultParameters() const
{
    return mResultParameters;
}

void CalcLoanRateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


CalcLoanTermJob::CalcLoanTermJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void CalcLoanTermJob::setParameters( const TNS__CalcLoanTerm& arg0 )
{
    mParameters = arg0;
}

TNS__CalcLoanTerm CalcLoanTermJob::parameters() const
{
    return mParameters;
}

void CalcLoanTermJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanTerm");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanTerm(mParameters.serialize(QString::fromLatin1("CalcLoanTerm")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanTerm;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CalcLoanTerm"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &CalcLoanTermJob::slotFinished);
}

TNS__CalcLoanTermResponse CalcLoanTermJob::resultParameters() const
{
    return mResultParameters;
}

void CalcLoanTermJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


CheckEmailJob::CheckEmailJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void CheckEmailJob::setParameters( const TNS__CheckEmail& arg0 )
{
    mParameters = arg0;
}

TNS__CheckEmail CheckEmailJob::parameters() const
{
    return mParameters;
}

void CheckEmailJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CheckEmail");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCheckEmail(mParameters.serialize(QString::fromLatin1("CheckEmail")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCheckEmail.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCheckEmail;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CheckEmail"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &CheckEmailJob::slotFinished);
}

TNS__CheckEmailResponse CheckEmailJob::resultParameters() const
{
    return mResultParameters;
}

void CheckEmailJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


DeleteEmailPINJob::DeleteEmailPINJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void DeleteEmailPINJob::setParameters( const TNS__DeleteEmailPIN& arg0 )
{
    mParameters = arg0;
}

TNS__DeleteEmailPIN DeleteEmailPINJob::parameters() const
{
    return mParameters;
}

void DeleteEmailPINJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/DeleteEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteEmailPIN(mParameters.serialize(QString::fromLatin1("DeleteEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueDeleteEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueDeleteEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteEmailPIN"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &DeleteEmailPINJob::slotFinished);
}

TNS__DeleteEmailPINResponse DeleteEmailPINJob::resultParameters() const
{
    return mResultParameters;
}

void DeleteEmailPINJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


VerifyEmailPINJob::VerifyEmailPINJob( LoanCalcService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void VerifyEmailPINJob::setParameters( const TNS__VerifyEmailPIN& arg0 )
{
    mParameters = arg0;
}

TNS__VerifyEmailPIN VerifyEmailPINJob::parameters() const
{
    return mParameters;
}

void VerifyEmailPINJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/VerifyEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueVerifyEmailPIN(mParameters.serialize(QString::fromLatin1("VerifyEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueVerifyEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueVerifyEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("VerifyEmailPIN"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &VerifyEmailPINJob::slotFinished);
}

TNS__VerifyEmailPINResponse VerifyEmailPINJob::resultParameters() const
{
    return mResultParameters;
}

void VerifyEmailPINJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:470
        mResultParameters.deserialize(_reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class LoanCalcService::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

LoanCalcService::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(nullptr)
{
}


LoanCalcService::LoanCalcService( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

LoanCalcService::~LoanCalcService()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = nullptr;
}

void LoanCalcService::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void LoanCalcService::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString LoanCalcService::endPoint() const
{
    return d_ptr->m_endPoint;
}

void LoanCalcService::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion LoanCalcService::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int LoanCalcService::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString LoanCalcService::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString LoanCalcService::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *LoanCalcService::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://loancalcservice.herokuapp.com/services/LoanCalcService/");
        const QString messageNamespace = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *LoanCalcService::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const LoanCalcService*>( this )->clientInterface() );
}

TNS__CalcLoanAmtResponse LoanCalcService::calcLoanAmt( const TNS__CalcLoanAmt& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanAmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanAmt(parameters.serialize(QString::fromLatin1("CalcLoanAmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanAmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CalcLoanAmt"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CalcLoanAmtResponse();
    TNS__CalcLoanAmtResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncCalcLoanAmt( const TNS__CalcLoanAmt& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanAmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanAmt(parameters.serialize(QString::fromLatin1("CalcLoanAmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanAmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanAmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CalcLoanAmt"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotCalcLoanAmtFinished);
}

void LoanCalcService::_kd_slotCalcLoanAmtFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT calcLoanAmtError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("calcLoanAmt"), reply);
    } else {
        TNS__CalcLoanAmtResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT calcLoanAmtDone( ret );
    }
    watcher->deleteLater();
}

TNS__CalcLoanPmtResponse LoanCalcService::calcLoanPmt( const TNS__CalcLoanPmt& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanPmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanPmt(parameters.serialize(QString::fromLatin1("CalcLoanPmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanPmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CalcLoanPmt"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CalcLoanPmtResponse();
    TNS__CalcLoanPmtResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncCalcLoanPmt( const TNS__CalcLoanPmt& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanPmt");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanPmt(parameters.serialize(QString::fromLatin1("CalcLoanPmt")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanPmt.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanPmt;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CalcLoanPmt"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotCalcLoanPmtFinished);
}

void LoanCalcService::_kd_slotCalcLoanPmtFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT calcLoanPmtError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("calcLoanPmt"), reply);
    } else {
        TNS__CalcLoanPmtResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT calcLoanPmtDone( ret );
    }
    watcher->deleteLater();
}

TNS__CalcLoanTermResponse LoanCalcService::calcLoanTerm( const TNS__CalcLoanTerm& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanTerm");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanTerm(parameters.serialize(QString::fromLatin1("CalcLoanTerm")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanTerm;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CalcLoanTerm"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CalcLoanTermResponse();
    TNS__CalcLoanTermResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncCalcLoanTerm( const TNS__CalcLoanTerm& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanTerm");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanTerm(parameters.serialize(QString::fromLatin1("CalcLoanTerm")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanTerm.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanTerm;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CalcLoanTerm"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotCalcLoanTermFinished);
}

void LoanCalcService::_kd_slotCalcLoanTermFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT calcLoanTermError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("calcLoanTerm"), reply);
    } else {
        TNS__CalcLoanTermResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT calcLoanTermDone( ret );
    }
    watcher->deleteLater();
}

TNS__CalcLoanRateResponse LoanCalcService::calcLoanRate( const TNS__CalcLoanRate& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanRate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanRate(parameters.serialize(QString::fromLatin1("CalcLoanRate")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanRate;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CalcLoanRate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CalcLoanRateResponse();
    TNS__CalcLoanRateResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncCalcLoanRate( const TNS__CalcLoanRate& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CalcLoanRate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCalcLoanRate(parameters.serialize(QString::fromLatin1("CalcLoanRate")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCalcLoanRate.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCalcLoanRate;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CalcLoanRate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotCalcLoanRateFinished);
}

void LoanCalcService::_kd_slotCalcLoanRateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT calcLoanRateError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("calcLoanRate"), reply);
    } else {
        TNS__CalcLoanRateResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT calcLoanRateDone( ret );
    }
    watcher->deleteLater();
}

TNS__CheckEmailResponse LoanCalcService::checkEmail( const TNS__CheckEmail& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CheckEmail");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCheckEmail(parameters.serialize(QString::fromLatin1("CheckEmail")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCheckEmail.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCheckEmail;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CheckEmail"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CheckEmailResponse();
    TNS__CheckEmailResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncCheckEmail( const TNS__CheckEmail& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/CheckEmail");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCheckEmail(parameters.serialize(QString::fromLatin1("CheckEmail")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueCheckEmail.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueCheckEmail;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CheckEmail"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotCheckEmailFinished);
}

void LoanCalcService::_kd_slotCheckEmailFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT checkEmailError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("checkEmail"), reply);
    } else {
        TNS__CheckEmailResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT checkEmailDone( ret );
    }
    watcher->deleteLater();
}

TNS__VerifyEmailPINResponse LoanCalcService::verifyEmailPIN( const TNS__VerifyEmailPIN& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/VerifyEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueVerifyEmailPIN(parameters.serialize(QString::fromLatin1("VerifyEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueVerifyEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueVerifyEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("VerifyEmailPIN"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__VerifyEmailPINResponse();
    TNS__VerifyEmailPINResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncVerifyEmailPIN( const TNS__VerifyEmailPIN& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/VerifyEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueVerifyEmailPIN(parameters.serialize(QString::fromLatin1("VerifyEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueVerifyEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueVerifyEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("VerifyEmailPIN"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotVerifyEmailPINFinished);
}

void LoanCalcService::_kd_slotVerifyEmailPINFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT verifyEmailPINError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("verifyEmailPIN"), reply);
    } else {
        TNS__VerifyEmailPINResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT verifyEmailPINDone( ret );
    }
    watcher->deleteLater();
}

TNS__DeleteEmailPINResponse LoanCalcService::deleteEmailPIN( const TNS__DeleteEmailPIN& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/DeleteEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteEmailPIN(parameters.serialize(QString::fromLatin1("DeleteEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueDeleteEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueDeleteEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteEmailPIN"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__DeleteEmailPINResponse();
    TNS__DeleteEmailPINResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
    return ret;// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:725
}

void LoanCalcService::asyncDeleteEmailPIN( const TNS__DeleteEmailPIN& parameters )
{
    const QString action = QString::fromLatin1("http://www.amortizer.org/LoanCalcService/DeleteEmailPIN");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteEmailPIN(parameters.serialize(QString::fromLatin1("DeleteEmailPIN")));// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:106
    _valueDeleteEmailPIN.setNamespaceUri(QString::fromLatin1("http://www.amortizer.org/LoanCalcService/"));
    message = _valueDeleteEmailPIN;// C:\dvlp\KDSoap\kdwsdl2cpp\src\elementargumentserializer.cpp:126
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteEmailPIN"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, &KDSoapPendingCallWatcher::finished,
                     this, &LoanCalcService::_kd_slotDeleteEmailPINFinished);
}

void LoanCalcService::_kd_slotDeleteEmailPINFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteEmailPINError(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:839
        Q_EMIT soapError(QLatin1String("deleteEmailPIN"), reply);
    } else {
        TNS__DeleteEmailPINResponse ret;
        ret.deserialize(reply);// C:\dvlp\KDSoap\kdwsdl2cpp\src\converter_clientstub.cpp:669
        Q_EMIT deleteEmailPINDone( ret );
    }
    watcher->deleteLater();
}


